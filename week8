<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
        rel="stylesheet"
    />
    <style>
        body {
            background-color: pink;
            font-family: "Roboto", sans-serif;
            background-image: url('https://th.bing.com/th/id/R.a495a4445e47e620ee0799aaacbd1c74?rik=dcYjNLdbWes%2fKg&pid=ImgRaw&r=0');
            background-size: cover; /* Ensures the image covers the whole background */
            background-position: center; /* Centers the image */
            background-repeat: no-repeat; /* Prevents repeating the image */
        }

        a {
            color: #f1379d;
        }

        .weather-app {
            background: rgb(153, 192, 225);
            max-width: 600px;
            margin: 45px auto;
            box-shadow: 0 30px 50px rgba(65, 50, 100, 0.08);
            border-radius: 16px;
            padding: 30px;
        }

        header {
            border-bottom: 1px solid #f9f7fe;
            padding: 0 0 30px 0;
        }

        .search-form-input {
            background-color: #f9f7fe;
            border: none;
            border-radius: 6px;
            width: 80%;
            font-size: 16px;
            padding: 15px 20px;
        }

        .search-form-button {
            background: #200369;
            padding: 15px 30px;
            border: none;
            font-size: 16px;
            margin-left: 5px;
            border-radius: 6px;
            color: rgb(202, 151, 184);
        }

        main {
            padding: 30px 0;
        }

        .weather-app-data {
            display: flex;
            justify-content: space-between;
        }

        .weather-app-city {
            margin: 0;
            font-size: 38px;
            line-height: 48px;
        }

        .weather-app-details {
            font-size: 16px;
            color: rgba(26, 2, 132, 0.4);
            line-height: 24px;
            font-weight: 500;
        }

        .weather-app-details strong {
            color: #ea15f2;
        }

        .weather-app-temperature-container {
            display: flex;
        }

        .weather-app-icon {
            width: 88px;
            height: 88px;
        }

        .weather-app-temperature {
            font-size: 88px;
            line-height: 88px;
            font-weight: bold;
        }

        .weather-app-unit {
            margin-top: 6px;
            font-size: 28px;
        }

        .forecast-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 10px;
            margin-top: 30px;
        }

        .forecast-day {
            text-align: center;
            padding: 10px 0;
            border-bottom: none; /* Remove border as items will be in a grid */
        }

        .forecast-date {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 5px; /* Add space between date and icon */
        }

        .forecast-icon {
            width: 48px;
            height: 48px;
            margin: 0 auto; /* Center the icon */
        }

        .forecast-temperature {
            font-size: 16px;
            font-weight: 500;
            margin-top: 5px; /* Add space between icon and temperature */
        }

        footer {
            border-top: 1px solid #f9f7fe;
            padding: 30px 0 0 0;
            text-align: center;
            font-size: 14px;
            color: rgba(0, 0, 0, 0.6);
        }
    </style>
    <title>Weather App</title>
</head>
<body>
<div class="weather-app">
    <header>
        <form class="search-form" id="search-form">
            <input
                type="search"
                placeholder="Enter a city.."
                required
                id="search-form-input"
                class="search-form-input"
            />
            <input type="submit" value="Search" class="search-form-button" />
        </form>
    </header>
    <main>
        <div class="weather-app-data">
            <div>
                <h1 class="weather-app-city" id="city"></h1>
                <p class="weather-app-details">
                    <span id="time"></span>,
                    <span id="description"></span>
                    <br />
                    Humidity: <strong id="humidity"></strong>, Wind:
                    <strong id="wind-speed"></strong>
                </p>
            </div>
            <div class="weather-app-temperature-container">
                <div id="icon"></div>
                <div class="weather-app-temperature" id="temperature"></div>
                <div class="weather-app-unit">°C</div>
            </div>
        </div>
        <div class="forecast-container" id="forecast"></div>
    </main>

    <footer>
        This project was coded by
        <a href="https://github.com/bongii11" target="_blank">Sbongile Khumalo</a>,
        is
        <a href="https://github.com/bongii11/project/new/main" target="_blank">open-sourced on GitHub</a>
        and
        <a href="https://app.netlify.com/teams/bongii11/overview" target="_blank">hosted on Netlify</a>
    </footer>
</div>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    function refreshWeather(response) {
        let temperatureElement = document.querySelector("#temperature");
        let temperature = response.data.temperature.current;
        let cityElement = document.querySelector("#city");
        let descriptionElement = document.querySelector("#description");
        let humidityElement = document.querySelector("#humidity");
        let windSpeedElement = document.querySelector("#wind-speed");
        let timeElement = document.querySelector("#time");
        let date = new Date(response.data.time * 1000);
        let iconElement = document.querySelector("#icon");

        cityElement.innerHTML = response.data.city;
        timeElement.innerHTML = formatDate(date);
        descriptionElement.innerHTML = response.data.condition.description;
        humidityElement.innerHTML = `${response.data.temperature.humidity}%`;
        windSpeedElement.innerHTML = `${response.data.wind.speed} km/h`;
        temperatureElement.innerHTML = Math.round(temperature);
        iconElement.innerHTML = `<img src="${response.data.condition.icon_url}" class="weather-app-icon" />`;

        getForecast(response.data.coordinates);
    }

    function formatDate(date) {
        let minutes = date.getMinutes();
        let hours = date.getHours();
        let days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        let day = days[date.getDay()];

        if (minutes < 10) {
            minutes = `0${minutes}`;
        }

        return `${day} ${hours}:${minutes}`;
    }

    function getForecast(coordinates) {
        let apiKey = "b2a5adcct04b33178913oc335f405433";
        let apiUrl = `https://api.shecodes.io/weather/v1/forecast?lon=${coordinates.longitude}&lat=${coordinates.latitude}&key=${apiKey}&units=metric`;
        axios.get(apiUrl).then(displayForecast);
    }

    function displayForecast(response) {
        let forecastElement = document.querySelector("#forecast");
        forecastElement.innerHTML = null;
        let forecast = response.data.daily;

        forecast.forEach(function (forecastDay, index) {
            if (index < 7) {
                forecastElement.innerHTML += `
                    <div class="forecast-day">
                        <div class="forecast-date">${formatForecastDate(forecastDay.time)}</div>
                        <div class="forecast-icon">
                            <img src="${forecastDay.condition.icon_url}" class="forecast-icon" />
                        </div>
                        <div class="forecast-temperature">
                            ${Math.round(forecastDay.temperature.minimum)}°C - ${Math.round(forecastDay.temperature.maximum)}°C
                        </div>
                    </div>
                `;
            }
        });
    }

    function formatForecastDate(timestamp) {
        let date = new Date(timestamp * 1000);
        let days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        let day = days[date.getDay()];
        return `${day}`;
    }

    function searchCity(city) {
        let apiKey = "b2a5adcct04b33178913oc335f405433";
        let apiUrl = `https://api.shecodes.io/weather/v1/current?query=${city}&key=${apiKey}&units=metric`;
        axios
            .get(apiUrl)
            .then(refreshWeather)
            .catch((error) => {
                alert("City not found. Please try again.");
            });
    }

    function handleSearchSubmit(event) {
        event.preventDefault();
        let searchInput = document.querySelector("#search-form-input");
        searchCity(searchInput.value);
    }

    let searchFormElement = document.querySelector("#search-form");
    searchFormElement.addEventListener("submit", handleSearchSubmit);

    searchCity("Paris");
</script>
</body>
</html>
